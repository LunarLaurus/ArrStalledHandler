services:
  arr-stalled-handler:
    build: .
    container_name: ArrStalledHandler
    restart: unless-stopped
    environment:
      RADARR_URL: "${RADARR_URL}" # Radarr URL
      RADARR_API_KEY: "${RADARR_API_KEY}" # Radarr API Key
      SONARR_URL: "${SONARR_URL}" # Sonarr URL
      SONARR_API_KEY: "${SONARR_API_KEY}" # Sonarr API Key
      LIDARR_URL: "${LIDARR_URL}" # Lidarr URL
      LIDARR_API_KEY: "${LIDARR_API_KEY}" # Lidarr API Key
      READARR_URL: "${READARR_URL}" # Readarr URL
      READARR_API_KEY: "${READARR_API_KEY}" # Readarr API Key
      STALLED_TIMEOUT: "${STALLED_TIMEOUT}" # How long a download should be stalled before handling it (in seconds)
      STALLED_ACTION: "${STALLED_ACTION}" # Options: REMOVE or BLOCKLIST or BLOCKLIST_AND_SEARCH
      VERBOSE: "${VERBOSE}" # Enable verbose/debug logging
      RUN_INTERVAL: "${RUN_INTERVAL}" # How often should the script be run (in seconds)
      COUNT_DOWNLOADING_METADATA_AS_STALLED: "${COUNT_DOWNLOADING_METADATA_AS_STALLED}" # If it should count downloads with the "Downloading Metadata" as stalled
      COUNT_IMPORT_FAILURE_AS_STALLED: "${COUNT_IMPORT_FAILURE_AS_STALLED}"             # If downloads that fail to import into a client should be marked as stalled
      DOWNLOADING_METADATA_TIMEOUT: "${DOWNLOADING_METADATA_TIMEOUT}"                   # Override the time for this to be considered stalled
      IMPORT_FAILURE_TIMEOUT: "${IMPORT_FAILURE_TIMEOUT}"                               # Override the time for this to be considered stalled